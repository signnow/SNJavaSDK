package com.signnow.library;

import java.io.IOException;

import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

import org.json.simple.JSONObject;

import com.signnow.config.Config;

public class Webhook {

	public static final MediaType JSON = MediaType.parse("application/json; charset=utf-8");	
	static OkHttpClient client = new OkHttpClient();
	
	public static String Create(String accessToken, String eventType, String callback_url)
	{
		JSONObject obj = new JSONObject();
		obj.put("event", eventType);
        obj.put("callback_url", callback_url);
        
        String json = obj.toJSONString();
		RequestBody body = RequestBody.create(JSON, json);
		Request request=null;
		try {
			request = new Request.Builder()
			  .url(Config.apiHost +"event_subscription")
			  .addHeader("Accept", "application/json")
			  .addHeader("Authorization",  "Bearer " + accessToken)
			  .post(body)
			  .build();
		} catch (Exception e1) {
			e1.printStackTrace();
		}
	  Response response;
	try {
		response = client.newCall(request).execute();
		if(response.isSuccessful())
		{
		return  response.body().string();
		}
	} catch (IOException e) {
		e.printStackTrace();
	}
	  return  null;
	}
	
	//List WebHooks
	
	public static String List(String accessToken)
	{
		Request request=null;
		try {
			request = new Request.Builder()
			  .url(Config.apiHost +"event_subscription")
			  .addHeader("Accept", "application/json")
			  .addHeader("Authorization",  "Bearer " + accessToken)
			  .get()
			  .build();
		} catch (Exception e1) {
			e1.printStackTrace();
		}
	  Response response;
	try {
		response = client.newCall(request).execute();
		if(response.isSuccessful())
		{
		return  response.body().string();
		}
	} catch (IOException e) {
		e.printStackTrace();
	}
	  return  null;
	}
	
	//Delete WebHooks
	
	public static String Delete(String accessToken,String subscriptionId)
	{
		Request request=null;
		try {
			request = new Request.Builder()
			  .url(Config.apiHost +"event_subscription/" + subscriptionId)
			  .addHeader("Accept", "application/json")
			  .addHeader("Authorization",  "Bearer " + accessToken)
			  .delete()
			  .build();
		} catch (Exception e1) {
			e1.printStackTrace();
		}
	  Response response;
	try {
		response = client.newCall(request).execute();
		if(response.isSuccessful())
		{
		return  response.body().string();
		}
	} catch (IOException e) {
		e.printStackTrace();
	}
	  return  null;
	}
}
