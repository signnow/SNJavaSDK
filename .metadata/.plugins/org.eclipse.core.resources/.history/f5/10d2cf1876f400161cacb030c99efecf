package com.signnow.library;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;

import org.json.simple.JSONObject;

import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

import com.signnow.config.Config;

public class Document {
	private static final MediaType MEDIA_TYPE_PDF = MediaType.parse("application/pdf");
	private static final MediaType MEDIA_TYPE_DOCX = MediaType.parse("application/vnd.openxmlformats-officedocument.wordprocessingml.document");
	public static final MediaType JSON = MediaType.parse("application/json; charset=utf-8");
	private static  MediaType MEDIA_TYPE; 
	static OkHttpClient client = new OkHttpClient();
	public static String Create(String accessToken,File file,String fileName, boolean extractFields, String resultFormat,String fileExtn)
	{		
		String path =(extractFields) ? "document/fieldextract" : "document";
		if(fileExtn == "pdf")
		{
			MEDIA_TYPE=MEDIA_TYPE_PDF;
		}
		else if(fileExtn == "docx")
		{
			MEDIA_TYPE=MEDIA_TYPE_DOCX;
		}
		RequestBody requestBody = new MultipartBody.Builder().setType(MultipartBody.FORM)
                .addFormDataPart("file", fileName, RequestBody.create(MEDIA_TYPE, file))
                .build();
		
		Request request = new Request.Builder()
		  .url(Config.apiHost +path)
		  .addHeader("Accept", "application/json")
		  .addHeader("Authorization", "Bearer " + accessToken)
		  .post(requestBody)
		  .build();
		
		Response response;
		try {
			response = client.newCall(request).execute();
			return  response.body().string();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return null;
	}
	
	public static String Delete(String accessToken, String documentId)
	{
		Request request = new Request.Builder()
		  .url(Config.apiHost +"document/" + documentId)
		  .addHeader("Accept", "application/json")
		  .addHeader("Authorization", "Bearer " + accessToken)
		  .delete()
		  .build();
		
		Response response;
		try {
			response = client.newCall(request).execute();
			return  response.body().string();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return null;
		
	}
	
	public static InputStream download(String accessToken, String documentId)
	{
		Request request = new Request.Builder()
		  .url(Config.apiHost +"document/" + documentId + "/download?type=collapsed")
		  .addHeader("Accept", "application/json")
		  .addHeader("Authorization", "Bearer " + accessToken)
		  .get()
		  .build();		
		Response response;
		try {
			response = client.newCall(request).execute();
			if(response.isSuccessful())
			{
			return  response.body().byteStream();
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}		
		return null;
	}
	
	//free-form invite
	public static String Invite(String accessToken, String invite_documentId, String inviteDataObjStr, String resultFormat, boolean disableEmail)
	{
		String isDisableEmail = (disableEmail) ? "?email=disable" : "";
		RequestBody body = RequestBody.create(JSON, inviteDataObjStr);
		Request request = new Request.Builder()
		  .url(Config.apiHost +"/document/" + invite_documentId + "/invite" + isDisableEmail)
		  .addHeader("Accept", "application/json")
		  .addHeader("Authorization", "Bearer " + accessToken)
		  .post(body)
		  .build();		
		Response response;
		try {
			response = client.newCall(request).execute();
			if(response.isSuccessful())
			{
			return  response.body().string();
			}
		} catch (IOException e) {
			e.printStackTrace();
		}		
		return null;
	}
	// cancel invite
	
	public static String CancelInvite(String accessToken, String invite_id, String resultFormat)
	{		
		JSONObject obj = new JSONObject();
		String json =obj.toString();
		RequestBody body = RequestBody.create(JSON, json);
		
		Request request = new Request.Builder()
		  .url(Config.apiHost +"document/" + invite_id + "/fieldinvitecancel")
		  //.url("https://hookb.in/vQQgpL0X")
		  .addHeader("Accept", "application/json")
		  .addHeader("Authorization", "Bearer " + accessToken)
		  .addHeader("Content-Length", "0")
		  .put(body)
		  .build();		
		Response response;
		try {
			response = client.newCall(request).execute();
			System.out.println(response.body().string());
			if(response.isSuccessful())
			{
			return  response.body().string();
			}
		} catch (IOException e) {
			e.printStackTrace();
		}		
		return null;
	}
	
	//download link
	
	public static String Share(String accessToken,String documentId)
	{
		
	}
}
