package com.signnow.library;

import java.io.IOException;

import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

import com.signnow.config.Config;

import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

public class DocumentGroup {

public static final MediaType JSON = MediaType.parse("application/json; charset=utf-8");	
	static OkHttpClient client = new OkHttpClient();
	
	public static JSONObject Create(String accessToken, String docGroupObjStr)
	{
		RequestBody body = RequestBody.create(JSON, docGroupObjStr);
		Request request = new Request.Builder()
		  .url(Config.apiHost +"documentgroup")
		  .addHeader("Accept", "application/json")
		  .addHeader("Authorization", "Bearer " + accessToken)
		  .post(body)
		  .build();		
		Response response;
		try {
			response = client.newCall(request).execute();
			JSONObject jsonObj=null;
			if(response.isSuccessful())
			{
				String str= response.body().string();
				JSONParser parser = new JSONParser();
				try {
					jsonObj = (JSONObject)parser.parse(str);
					return jsonObj;
					}
				catch (ParseException e) {
					e.printStackTrace();
					}
			}
		} catch (IOException e) {
			e.printStackTrace();
		}		
		return null;
	}

	//Get Document Group
	public static JSONObject Get(String accessToken, String docGroupId)
	{
		String url = (docGroupId.length() > 0) ? "/documentgroup/" + docGroupId : "/user/documentgroups";
		Request request = new Request.Builder()
		  .url(Config.apiHost +url)
		  .addHeader("Accept", "application/json")
		  .addHeader("Authorization", "Bearer " + accessToken)
		  .get()
		  .build();		
		Response response;
		try {
			response = client.newCall(request).execute();
			JSONObject jsonObj=null;
			if(response.isSuccessful())
			{
				String str= response.body().string();
				JSONParser parser = new JSONParser();
				try {
					jsonObj = (JSONObject)parser.parse(str);
					return jsonObj;
					}
				catch (ParseException e) {
					e.printStackTrace();
					}
			}
		} catch (IOException e) {
			e.printStackTrace();
		}		
		return null;
	}


	//Delete Document Group
	public static JSONObject Delete(String accessToken, String docGroupId)
	{
		Request request = new Request.Builder()
		  .url(Config.apiHost +"documentgroup/" + docGroupId)
		  .addHeader("Accept", "application/json")
		  .addHeader("Authorization", "Bearer " + accessToken)
		  .delete()
		  .build();		
		Response response;
		try {
			response = client.newCall(request).execute();
			JSONObject jsonObj=null;
			if(response.isSuccessful())
			{
				String str= response.body().string();
				JSONParser parser = new JSONParser();
				try {
					jsonObj = (JSONObject)parser.parse(str);
					return jsonObj;
					}
				catch (ParseException e) {
					e.printStackTrace();
					}
			}
		} catch (IOException e) {
			e.printStackTrace();
		}		
		return null;
	}

	//groupInvite
	public static JSONObject groupInvite(String accessToken, String groupId,JSONObject inviteGrpModel)
	{
		String inviteGrpModelStr = inviteGrpModel.toJSONString();
		RequestBody body = RequestBody.create(JSON, inviteGrpModelStr);
		Request request = new Request.Builder()
		  .url(Config.apiHost +"documentgroup/" + groupId + "/groupinvite")
		  .addHeader("Accept", "application/json")
		  .addHeader("Authorization", "Bearer " + accessToken)
		  .post(body)
		  .build();		
		Response response;
		try {
			response = client.newCall(request).execute();
			if(response.isSuccessful())
			{
			String str=  response.body().string();
			JSONParser parser = new JSONParser();
			try {
				JSONObject jsonObj = (JSONObject)parser.parse(str);
				return jsonObj;
			} catch (ParseException e) {
				e.printStackTrace();
			}
			}
		} catch (IOException e) {
			e.printStackTrace();
		}		
		return null;
	}
	
	
	//Get Group Invite
	public static JSONObject getInvite(String accessToken, String groupId,String inviteId)
	{
		Request request = new Request.Builder()
		  .url(Config.apiHost +"documentgroup/" + groupId + "/groupinvite/" + inviteId)
		  .addHeader("Accept", "application/json")
		  .addHeader("Authorization", "Bearer " + accessToken)
		  .get()
		  .build();		
		Response response;
		try {
			response = client.newCall(request).execute();
			if(response.isSuccessful())
			{
			String str=  response.body().string();
			JSONParser parser = new JSONParser();
			try {
				JSONObject jsonObj = (JSONObject)parser.parse(str);
				return jsonObj;
			} catch (ParseException e) {
				e.printStackTrace();
			}
			}
		} catch (IOException e) {
			e.printStackTrace();
		}		
		return null;
	}		
		
		
  //Cancel Group Invite
	public static JSONObject cancelGroupInvite(String accessToken, String groupId,String inviteId)
	{
		RequestBody body = RequestBody.create(JSON, "");
		Request request = new Request.Builder()
		  .url(Config.apiHost +"documentgroup/" + groupId + "/groupinvite/" + inviteId + "/cancelinvite")
		  .addHeader("Accept", "application/json")
		  .addHeader("Authorization", "Bearer " + accessToken)
		  .post(body)
		  .build();		
		Response response;
		try {
			response = client.newCall(request).execute();
			if(response.isSuccessful())
			{
			String str=  response.body().string();
			JSONParser parser = new JSONParser();
			try {
				JSONObject jsonObj = (JSONObject)parser.parse(str);
				return jsonObj;
			} catch (ParseException e) {
				e.printStackTrace();
			}
			}
		} catch (IOException e) {
			e.printStackTrace();
		}		
		return null;
	}
					
				
				//Get Pending Invites in Document Group
				public static JSONObject getPendingInvites(String accessToken, String groupId,String inviteId)
				{
					Request request = new Request.Builder()
					  .url(Config.apiHost +"documentgroup/" + groupId + "/groupinvite/" + inviteId + "/pendinginvites")
					  .addHeader("Accept", "application/json")
					  .addHeader("Authorization", "Bearer " + accessToken)
					  .get()
					  .build();		
					Response response;
					try {
						response = client.newCall(request).execute();
						if(response.isSuccessful())
						{
						String str=  response.body().string();
						JSONParser parser = new JSONParser();
						try {
							JSONObject jsonObj = (JSONObject)parser.parse(str);
							return jsonObj;
						} catch (ParseException e) {
							e.printStackTrace();
						}
						}
					} catch (IOException e) {
						e.printStackTrace();
					}		
					return null;
				}
}
