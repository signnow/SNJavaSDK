package com.signnow.library;

import java.io.IOException;

import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

import com.signnow.config.Config;

import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;
import okio.BufferedSource;

public class DocumentGroup {

public static final MediaType JSON = MediaType.parse("application/json; charset=utf-8");	
	static OkHttpClient client = new OkHttpClient();
	
    /// <summary>
    /// Create a document group from a list of document ids.
    /// </summary>
    /// <param name="accessToken"></param>
    /// <param name="docGroupObjStr">Data Object (ex. dynamic new { document_ids = new[] { "1234567890", "0987654321" }, group_name = "My Document Group Name" }</param>
    /// <returns>Returns JSONObject with an Id of the new document group.</returns>
	public static JSONObject Create(String accessToken, String docGroupObjStr)
	{
		RequestBody body = RequestBody.create(JSON, docGroupObjStr);
		Request request = new Request.Builder()
		  .url(Config.apiHost +"documentgroup")
		  .addHeader("Accept", "application/json")
		  .addHeader("Authorization", "Bearer " + accessToken)
		  .post(body)
		  .build();		
		Response response;
		try {
			response = client.newCall(request).execute();
			JSONObject jsonObj=null;
			if(response.isSuccessful())
			{
				String str= response.body().string();
				JSONParser parser = new JSONParser();
				try {
					jsonObj = (JSONObject)parser.parse(str);
					return jsonObj;
					}
				catch (ParseException e) {
					e.printStackTrace();
					}
			}
		} catch (IOException e) {
			e.printStackTrace();
		}		
		return null;
	}

	
    /// <summary>
    /// Get a list of document groups for the user. If a GroupId is provided then it will return the document and role information for the document group.
    /// </summary>
    /// <param name="accessToken"></param>
    /// <param name="docGroupId">docGroupId is optional</param>
    /// <returns>Returns a list or single document group.</returns>
	
	public static JSONObject Get(String accessToken, String docGroupId)
	{
		String url = (docGroupId.length() > 0) ? "/documentgroup/" + docGroupId : "/user/documentgroups";
		Request request = new Request.Builder()
		  .url(Config.apiHost +url)
		  .addHeader("Accept", "application/json")
		  .addHeader("Authorization", "Bearer " + accessToken)
		  .get()
		  .build();		
		Response response;
		try {
			response = client.newCall(request).execute();
			JSONObject jsonObj=null;
			if(response.isSuccessful())
			{
				String str= response.body().string();
				JSONParser parser = new JSONParser();
				try {
					jsonObj = (JSONObject)parser.parse(str);
					return jsonObj;
					}
				catch (ParseException e) {
					e.printStackTrace();
					}
			}
		} catch (IOException e) {
			e.printStackTrace();
		}		
		return null;
	}


    /// <summary>
    /// Deletes the document group.  Documents within the group are not deleted.  Document groups cannot be deleted while they have an group invite.
    /// </summary>
    /// <param name="accessToken"></param>
    /// <param name="docGroupId">Document Group Id</param>
    /// <returns>Returns a JSONObject with Success Message</returns>
	public static JSONObject Delete(String accessToken, String docGroupId)
	{
		Request request = new Request.Builder()
		  .url(Config.apiHost +"documentgroup/" + docGroupId)
		  .addHeader("Accept", "application/json")
		  .addHeader("Authorization", "Bearer " + accessToken)
		  .delete()
		  .build();		
		Response response;
		try {
			response = client.newCall(request).execute();
			JSONObject jsonObj=null;
			if(response.isSuccessful())
			{
				String str= response.body().string();
				JSONParser parser = new JSONParser();
				try {
					jsonObj = (JSONObject)parser.parse(str);
					return jsonObj;
					}
				catch (ParseException e) {
					e.printStackTrace();
					}
			}
		} catch (IOException e) {
			e.printStackTrace();
		}		
		return null;
	}
    /// <summary>
    /// Creates a multi-step invite for a document group.
    /// </summary>
    /// <param name="accessToken"></param>
    /// <param name="groupId">Document Group Id</param>
    /// <param name="inviteGrpModel">Data Object containing the Group Invite Parameters</param>
    /// <returns>Returns the JSONObject with a new Document Group Invite Id</returns>
	public static JSONObject groupInvite(String accessToken, String groupId,JSONObject inviteGrpModel)
	{
		String inviteGrpModelStr = inviteGrpModel.toJSONString();
		RequestBody body = RequestBody.create(JSON, inviteGrpModelStr);
		Request request = new Request.Builder()
		  .url(Config.apiHost +"documentgroup/" + groupId + "/groupinvite")
		  .addHeader("Accept", "application/json")
		  .addHeader("Authorization", "Bearer " + accessToken)
		  .post(body)
		  .build();		
		Response response;
		try {
			response = client.newCall(request).execute();
			if(response.isSuccessful())
			{
			String str=  response.body().string();
			JSONParser parser = new JSONParser();
			try {
				JSONObject jsonObj = (JSONObject)parser.parse(str);
				return jsonObj;
			} catch (ParseException e) {
				e.printStackTrace();
			}
			}
		} catch (IOException e) {
			e.printStackTrace();
		}		
		return null;
	}
	
	
    /// <summary>
    /// Get Invite action information for a group invite, including the status of each step and action.  This can only can be called by the owner of the document group.
    /// </summary>
    /// <param name="accessToken"></param>
    /// <param name="groupId">Document Group Id</param>
    /// <param name="inviteId">Document Group Invite Id</param>
    /// <returns>Returns the JSONObject having Group Invite</returns>
	public static JSONObject getInvite(String accessToken, String groupId,String inviteId)
	{
		/*Request request = new Request.Builder()
		  .url(Config.apiHost +"documentgroup/" + groupId + "/groupinvite/" + inviteId)
		  .addHeader("Accept", "application/json")
		  .addHeader("Authorization", "Bearer " + accessToken)
		  .get()
		  .build();		
		Response response;
		try {
			response = client.newCall(request).execute();
			if(response.isSuccessful())
			{
			String str=  response.body().string();
			JSONParser parser = new JSONParser();
			try {
				JSONObject jsonObj = (JSONObject)parser.parse(str);
				return jsonObj;
			} catch (ParseException e) {
				e.printStackTrace();
			}
			}
		} catch (IOException e) {
			e.printStackTrace();
		}		
		return null;*/
		
		
		Request request = new Request.Builder()
		  .url(Config.apiHost +"documentgroup/" + groupId + "/groupinvite/" + inviteId)
		  .addHeader("Accept", "application/json")
		  .addHeader("Authorization", "Bearer " + accessToken)
		  .get()
		  .build();		
		Response response;
		try {
			response = client.newCall(request).execute();
			if(response.isSuccessful())
			{
				MediaType contentType = response.body().contentType();
				ResponseBody body = ResponseBody.create(contentType, "");
				Response resp = response.newBuilder().body(body).build();
				String str = resp.body().string();
			}
		} catch (IOException e) {
			e.printStackTrace();
		}		
		return null;
		
	}		
		
		
    /// <summary>
    /// Cancels a group invite.  All documents will be unshared with invitees.  Any signatures that occurred before canceling will remain on the documents.
    /// </summary>
    /// <param name="accessToken"></param>
    /// <param name="groupId">Document Group Invite Id</param>
    /// <param name="inviteId">Document Group Invite Id</param>
    /// <returns>Returns a JSONObject with Success Message</returns>
	public static JSONObject cancelGroupInvite(String accessToken, String groupId,String inviteId)
	{
		RequestBody body = RequestBody.create(JSON, "");
		Request request = new Request.Builder()
		  .url(Config.apiHost +"documentgroup/" + groupId + "/groupinvite/" + inviteId + "/cancelinvite")
		  .addHeader("Accept", "application/json")
		  .addHeader("Authorization", "Bearer " + accessToken)
		  .post(body)
		  .build();		
		Response response;
		try {
			response = client.newCall(request).execute();
			if(response.isSuccessful())
			{
			String str=  response.body().string();
			JSONParser parser = new JSONParser();
			try {
				JSONObject jsonObj = (JSONObject)parser.parse(str);
				return jsonObj;
			} catch (ParseException e) {
				e.printStackTrace();
			}
			}
		} catch (IOException e) {
			e.printStackTrace();
		}		
		return null;
	}
					
	 
    /// <summary>
    /// Returns back all pending invite information as well as invites already signed for a group invite for the user that makes the call.  If the user making the call is the document owner, it will return pending invites for that user and ALL actions that have already been fulfilled.
    /// </summary>
    /// <param name="accessToken"></param>
    /// <param name="groupId">Document Group Id</param>
    /// <param name="inviteId">Document Group Invite Id</param>
    /// <returns>Returns JSONObject with all pending invite information.</returns>

		public static JSONObject getPendingInvites(String accessToken, String groupId,String inviteId)
		{
			Request request = new Request.Builder()
			  .url(Config.apiHost +"documentgroup/" + groupId + "/groupinvite/" + inviteId + "/pendinginvites")
			  .addHeader("Accept", "application/json")
			  .addHeader("Authorization", "Bearer " + accessToken)
			  .get()
			  .build();		
			Response response;
			try {
				response = client.newCall(request).execute();
				if(response.isSuccessful())
				{
				String str=  response.body().string();
				JSONParser parser = new JSONParser();
				try {
					JSONObject jsonObj = (JSONObject)parser.parse(str);
					return jsonObj;
				} catch (ParseException e) {
					e.printStackTrace();
				}
				}
			} catch (IOException e) {
				e.printStackTrace();
			}		
			return null;
		}				

        /// <summary>
        /// Resends invite emails to those with pending invites for the group invite.
        /// </summary>
        /// <param name="accessToken"></param>
        /// <param name="groupId">Document Group Id</param>
        /// <param name="inviteId">Document Group Invite Id</param>
        /// <returns>Returns aJSONObject with  Success Message</returns>

		public static JSONObject resendInvite(String accessToken, String groupId,String inviteId)
		{
			RequestBody body= RequestBody.create(JSON, "");
			Request request = new Request.Builder()
			  .url(Config.apiHost +"documentgroup/" + groupId + "/groupinvite/" + inviteId + "/resendinvites")
			  .addHeader("Accept", "application/json")
			  .addHeader("Authorization", "Bearer " + accessToken)
			  .post(body)
			  .build();		
			Response response;
			try {
				response = client.newCall(request).execute();
				if(response.isSuccessful())
				{
				String str=  response.body().string();
				JSONParser parser = new JSONParser();
				try {
					JSONObject jsonObj = (JSONObject)parser.parse(str);
					return jsonObj;
				} catch (ParseException e) {
					e.printStackTrace();
				}
				}
			} catch (IOException e) {
				e.printStackTrace();
			}		
			return null;
		}
		
		
        /// <summary>
        /// Used to wither replace inviters for a particular step or update the invite attributes for a user at a particular step.
        /// </summary>
        /// <param name="accessToken"></param>
        /// <param name="groupId">Documet Group Id</param>
        /// <param name="inviteId">Document Group Invite Id</param>
        /// <param name="stepId">Document Group Invite Step Id</param>
        /// <param name="replaceObj">Data Object conatining new invite step parameters.</param>
        /// <returns>Returns a JSONObject with Success Message</returns>

		public static JSONObject replaceInviters(String accessToken, String groupId,String inviteId,String stepId,JSONObject replaceObj)
		{
			String json = replaceObj.toJSONString();
			RequestBody body = RequestBody.create(JSON, json);
			Request request = new Request.Builder()
			  .url(Config.apiHost +"documentgroup/" + groupId + "/groupinvite/" + inviteId + "/step/" + stepId)
			  .addHeader("Accept", "application/json")
			  .addHeader("Authorization", "Bearer " + accessToken)
			  .post(body)
			  .build();		
			Response response;
			try {
				response = client.newCall(request).execute();
				if(response.isSuccessful())
				{
				String str=  response.body().string();
				JSONParser parser = new JSONParser();
				try {
					JSONObject jsonObj = (JSONObject)parser.parse(str);
					return jsonObj;
				} catch (ParseException e) {
					e.printStackTrace();
				}
				}
			} catch (IOException e) {
				e.printStackTrace();
			}		
			return null;
		}
		
}
